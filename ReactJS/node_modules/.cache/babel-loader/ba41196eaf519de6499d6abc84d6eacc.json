{"ast":null,"code":"import actionTypes from './actionTypes';\nimport { getAllCodeServiece, createNewUserService } from \"../../services/userService\"; // export const fetchGenderStart = () => ({\n//     type: actionTypes.FETCH_GENDER_START\n// })\n\nexport const fetchGenderStart = () => {\n  return async (dispatch, getState) => {\n    try {\n      dispatch({\n        type: actionTypes.FETCH_GENDER_START\n      });\n      let res = await getAllCodeServiece(\"GENDER\");\n\n      if (res && res.errCode === 0) {\n        dispatch(fetchGenderSuccess(res.data));\n      } else {\n        dispatch(fetchGenderfailed());\n      }\n    } catch (e) {\n      dispatch(fetchGenderfailed());\n      console.log('fetchGenderfailed error', e);\n    }\n  };\n};\nexport const fetchPositionStart = () => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await getAllCodeServiece(\"POSITION\");\n\n      if (res && res.errCode === 0) {\n        dispatch(fetchPositionSuccess(res.data));\n      } else {\n        dispatch(fetchPositionfailed());\n      }\n    } catch (e) {\n      dispatch(fetchPositionfailed());\n      console.log('fetchPositionfailed error', e);\n    }\n  };\n};\nexport const fetchRoleStart = () => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await getAllCodeServiece(\"ROLE\");\n\n      if (res && res.errCode === 0) {\n        dispatch(fetchRoleSuccess(res.data));\n      } else {\n        dispatch(fetchRolefailed());\n      }\n    } catch (e) {\n      dispatch(fetchRolefailed());\n      console.log('fetchRolefailed error', e);\n    }\n  };\n};\nexport const fetchGenderSuccess = GenderData => ({\n  type: actionTypes.FETCH_GENDER_SUCCESS,\n  data: GenderData\n});\nexport const fetchGenderfailed = () => ({\n  type: actionTypes.FETCH_GENDER_FAILED\n});\nexport const fetchPositionSuccess = positionData => ({\n  type: actionTypes.FETCH_POSITION_SUCCESS,\n  data: positionData\n});\nexport const fetchPositionfailed = () => ({\n  type: actionTypes.FETCH_POSITION_FAILED\n});\nexport const fetchRoleSuccess = roleData => ({\n  type: actionTypes.FETCH_ROLE_SUCCESS,\n  data: roleData\n});\nexport const fetchRolefailed = () => ({\n  type: actionTypes.FETCH_ROLE_FAILED\n});\nexport const createNewUser = data => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await createNewUserService;\n      console.log('check create user redux:', res);\n\n      if (res && res.errCode === 0) {\n        dispatch(saveUserSuccess());\n      } else {\n        dispatch(saveUserFailed());\n      }\n    } catch (e) {\n      dispatch(saveUserFailed());\n      console.log('saveUserFailed error', e);\n    }\n  };\n};\nexport const saveUserSuccess = () => ({\n  type: 'CREATE_USER_SUCCESS'\n});\nexport const saveUserFailed = () => ({\n  type: 'CREATE_USER_SUCCESS'\n});","map":{"version":3,"sources":["C:/LT Front End/BookingCareRun/BookingCare1/ReactJS/src/store/actions/adminActions.js"],"names":["actionTypes","getAllCodeServiece","createNewUserService","fetchGenderStart","dispatch","getState","type","FETCH_GENDER_START","res","errCode","fetchGenderSuccess","data","fetchGenderfailed","e","console","log","fetchPositionStart","fetchPositionSuccess","fetchPositionfailed","fetchRoleStart","fetchRoleSuccess","fetchRolefailed","GenderData","FETCH_GENDER_SUCCESS","FETCH_GENDER_FAILED","positionData","FETCH_POSITION_SUCCESS","FETCH_POSITION_FAILED","roleData","FETCH_ROLE_SUCCESS","FETCH_ROLE_FAILED","createNewUser","saveUserSuccess","saveUserFailed"],"mappings":"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","sourcesContent":["import actionTypes from './actionTypes';\r\nimport { getAllCodeServiece, createNewUserService } from \"../../services/userService\";\r\n\r\n// export const fetchGenderStart = () => ({\r\n//     type: actionTypes.FETCH_GENDER_START\r\n// })\r\n\r\nexport const fetchGenderStart = () => {\r\n    return async (dispatch, getState)  =>  {\r\n    try{\r\n        dispatch({ type: actionTypes.FETCH_GENDER_START })\r\n        let res = await getAllCodeServiece(\"GENDER\");\r\n        if ( res && res.errCode === 0){\r\n            dispatch(fetchGenderSuccess(res.data));\r\n        }\r\n        else{\r\n            dispatch(fetchGenderfailed());\r\n        }\r\n    }catch(e){\r\n        dispatch(fetchGenderfailed());\r\n        console.log('fetchGenderfailed error', e)\r\n        }\r\n    }\r\n}\r\n    \r\nexport const fetchPositionStart = () => {\r\n    return async (dispatch, getState)  =>  {\r\n    try{\r\n        let res = await getAllCodeServiece(\"POSITION\");\r\n        if ( res && res.errCode === 0){\r\n            dispatch(fetchPositionSuccess(res.data));\r\n        }\r\n        else{\r\n            dispatch(fetchPositionfailed());\r\n        }\r\n    }catch(e){\r\n        dispatch(fetchPositionfailed());\r\n        console.log('fetchPositionfailed error', e)\r\n        }\r\n    }\r\n}\r\n\r\nexport const fetchRoleStart = () => {\r\n    return async (dispatch, getState)  =>  {\r\n    try{\r\n        let res = await getAllCodeServiece(\"ROLE\");\r\n        if ( res && res.errCode === 0){\r\n            dispatch(fetchRoleSuccess(res.data));\r\n        } else{\r\n            dispatch(fetchRolefailed());\r\n        }\r\n    }catch(e){\r\n        dispatch(fetchRolefailed());\r\n        console.log('fetchRolefailed error', e)\r\n        }\r\n    }\r\n}\r\n\r\nexport const fetchGenderSuccess = (GenderData) => ({\r\n    type: actionTypes.FETCH_GENDER_SUCCESS,\r\n    data: GenderData\r\n})\r\n\r\nexport const fetchGenderfailed = () => ({\r\n    type: actionTypes.FETCH_GENDER_FAILED\r\n})\r\n\r\n\r\nexport const fetchPositionSuccess = (positionData) => ({\r\n    type: actionTypes.FETCH_POSITION_SUCCESS,\r\n    data: positionData\r\n})\r\n\r\nexport const fetchPositionfailed = () => ({\r\n    type: actionTypes.FETCH_POSITION_FAILED\r\n})\r\n\r\nexport const fetchRoleSuccess = (roleData) => ({\r\n    type: actionTypes.FETCH_ROLE_SUCCESS,\r\n    data: roleData\r\n})\r\n\r\nexport const fetchRolefailed = () => ({\r\n    type: actionTypes.FETCH_ROLE_FAILED\r\n})\r\n\r\n\r\nexport const createNewUser = (data) => {\r\n    return async (dispatch, getState)  =>  {\r\n        try{\r\n            let res = await createNewUserService ;\r\n            console.log('check create user redux:',res)\r\n            if ( res && res.errCode === 0){\r\n                dispatch(saveUserSuccess());\r\n            }\r\n            else{\r\n                dispatch(saveUserFailed());\r\n            }\r\n        }catch(e){\r\n            dispatch(saveUserFailed());\r\n            console.log('saveUserFailed error', e)\r\n        }\r\n    }\r\n}\r\n\r\nexport const saveUserSuccess = () => ({\r\n    type: 'CREATE_USER_SUCCESS'\r\n})\r\nexport const saveUserFailed = () => ({\r\n    type: 'CREATE_USER_SUCCESS'\r\n})"]},"metadata":{},"sourceType":"module"}